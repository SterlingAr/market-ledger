syntax = "proto3";

package v1;

import "google/api/annotations.proto";

option go_package = "api/proto/v1";

service MarketLedger {
    rpc Sell(NewInvoiceRequest) returns (NewInvoiceResponse) {
        option (google.api.http) = {
            put: "/v1/sell" body: "*"
        };
    }

    rpc NewSellOrder(NewSellOrderRequest) returns (NewSellOrderResponse) {
        option (google.api.http) = {
            put: "/v1/sell-order/new" body: "*"
        };
    }

    rpc NewBid(NewBidRequest) returns (NewBidResponse) {
        option (google.api.http) = {
            put: "/v1/bids/new" body: "*"
        };
    }

    rpc MatchingAlgorithm(MatchingAlgorithmRequest) returns (MatchingAlgorithmResponse) {
        option (google.api.http) = {
            put: "/v1/matching-algorithm" body: "*"
        };
    }

    rpc GetLedger(Empty) returns (LedgerResponse) {
        option (google.api.http) = {
            get: "/v1/ledger"
        };
    }
}

message Empty {}

message NewInvoiceRequest {
    // Unique ID of the Issuer
    uint64  issuerId = 1;
    // Unique invoice name
    string name = 2;
    // Full price of the Invoice
    double  faceValue = 3;
    // Price that needs to be covered, usually smaller but not greater than the rawValue
    double  neededValue = 4;
}

message NewInvoiceResponse {
    // ID of the created Invoice
    uint64 id = 1;
}

message NewSellOrderRequest {
    uint64 invoiceId = 1;
}

message NewSellOrderResponse {
    uint64 sellOrderId = 1;
}

message NewBidRequest {
    uint64 investorId = 1;
    uint64 sellOrderId = 2;
    double investedValue = 3;
    double discount = 4;
}

message NewBidResponse {
    uint64 position = 1;
    double reservedValue = 2;
    double expectedProfit = 3;
}

message MatchingAlgorithmRequest {}

message MatchingAlgorithmResponse {}

message LedgerEntry {
    string investorName = 1;
    string invoiceName = 2;
    double investedBalance = 3;
    double reservedBalance = 4;
    double expectedProfit = 5;
}

message LedgerResponse {
    repeated LedgerEntry entries = 1;
}