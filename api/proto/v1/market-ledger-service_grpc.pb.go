// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MarketLedgerClient is the client API for MarketLedger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketLedgerClient interface {
	Sell(ctx context.Context, in *NewInvoiceRequest, opts ...grpc.CallOption) (*NewInvoiceResponse, error)
	NewSellOrder(ctx context.Context, in *NewSellOrderRequest, opts ...grpc.CallOption) (*NewSellOrderResponse, error)
	NewBid(ctx context.Context, in *NewBidRequest, opts ...grpc.CallOption) (*NewBidResponse, error)
	MatchingAlgorithm(ctx context.Context, in *MatchingAlgorithmRequest, opts ...grpc.CallOption) (*MatchingAlgorithmResponse, error)
	GetLedger(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LedgerResponse, error)
}

type marketLedgerClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketLedgerClient(cc grpc.ClientConnInterface) MarketLedgerClient {
	return &marketLedgerClient{cc}
}

func (c *marketLedgerClient) Sell(ctx context.Context, in *NewInvoiceRequest, opts ...grpc.CallOption) (*NewInvoiceResponse, error) {
	out := new(NewInvoiceResponse)
	err := c.cc.Invoke(ctx, "/v1.MarketLedger/Sell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketLedgerClient) NewSellOrder(ctx context.Context, in *NewSellOrderRequest, opts ...grpc.CallOption) (*NewSellOrderResponse, error) {
	out := new(NewSellOrderResponse)
	err := c.cc.Invoke(ctx, "/v1.MarketLedger/NewSellOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketLedgerClient) NewBid(ctx context.Context, in *NewBidRequest, opts ...grpc.CallOption) (*NewBidResponse, error) {
	out := new(NewBidResponse)
	err := c.cc.Invoke(ctx, "/v1.MarketLedger/NewBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketLedgerClient) MatchingAlgorithm(ctx context.Context, in *MatchingAlgorithmRequest, opts ...grpc.CallOption) (*MatchingAlgorithmResponse, error) {
	out := new(MatchingAlgorithmResponse)
	err := c.cc.Invoke(ctx, "/v1.MarketLedger/MatchingAlgorithm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketLedgerClient) GetLedger(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LedgerResponse, error) {
	out := new(LedgerResponse)
	err := c.cc.Invoke(ctx, "/v1.MarketLedger/GetLedger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketLedgerServer is the server API for MarketLedger service.
// All implementations must embed UnimplementedMarketLedgerServer
// for forward compatibility
type MarketLedgerServer interface {
	Sell(context.Context, *NewInvoiceRequest) (*NewInvoiceResponse, error)
	NewSellOrder(context.Context, *NewSellOrderRequest) (*NewSellOrderResponse, error)
	NewBid(context.Context, *NewBidRequest) (*NewBidResponse, error)
	MatchingAlgorithm(context.Context, *MatchingAlgorithmRequest) (*MatchingAlgorithmResponse, error)
	GetLedger(context.Context, *Empty) (*LedgerResponse, error)
	mustEmbedUnimplementedMarketLedgerServer()
}

// UnimplementedMarketLedgerServer must be embedded to have forward compatible implementations.
type UnimplementedMarketLedgerServer struct {
}

func (UnimplementedMarketLedgerServer) Sell(context.Context, *NewInvoiceRequest) (*NewInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sell not implemented")
}
func (UnimplementedMarketLedgerServer) NewSellOrder(context.Context, *NewSellOrderRequest) (*NewSellOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSellOrder not implemented")
}
func (UnimplementedMarketLedgerServer) NewBid(context.Context, *NewBidRequest) (*NewBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBid not implemented")
}
func (UnimplementedMarketLedgerServer) MatchingAlgorithm(context.Context, *MatchingAlgorithmRequest) (*MatchingAlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchingAlgorithm not implemented")
}
func (UnimplementedMarketLedgerServer) GetLedger(context.Context, *Empty) (*LedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLedger not implemented")
}
func (UnimplementedMarketLedgerServer) mustEmbedUnimplementedMarketLedgerServer() {}

// UnsafeMarketLedgerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketLedgerServer will
// result in compilation errors.
type UnsafeMarketLedgerServer interface {
	mustEmbedUnimplementedMarketLedgerServer()
}

func RegisterMarketLedgerServer(s *grpc.Server, srv MarketLedgerServer) {
	s.RegisterService(&_MarketLedger_serviceDesc, srv)
}

func _MarketLedger_Sell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketLedgerServer).Sell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MarketLedger/Sell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketLedgerServer).Sell(ctx, req.(*NewInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketLedger_NewSellOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSellOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketLedgerServer).NewSellOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MarketLedger/NewSellOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketLedgerServer).NewSellOrder(ctx, req.(*NewSellOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketLedger_NewBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketLedgerServer).NewBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MarketLedger/NewBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketLedgerServer).NewBid(ctx, req.(*NewBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketLedger_MatchingAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchingAlgorithmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketLedgerServer).MatchingAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MarketLedger/MatchingAlgorithm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketLedgerServer).MatchingAlgorithm(ctx, req.(*MatchingAlgorithmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketLedger_GetLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketLedgerServer).GetLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MarketLedger/GetLedger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketLedgerServer).GetLedger(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _MarketLedger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.MarketLedger",
	HandlerType: (*MarketLedgerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sell",
			Handler:    _MarketLedger_Sell_Handler,
		},
		{
			MethodName: "NewSellOrder",
			Handler:    _MarketLedger_NewSellOrder_Handler,
		},
		{
			MethodName: "NewBid",
			Handler:    _MarketLedger_NewBid_Handler,
		},
		{
			MethodName: "MatchingAlgorithm",
			Handler:    _MarketLedger_MatchingAlgorithm_Handler,
		},
		{
			MethodName: "GetLedger",
			Handler:    _MarketLedger_GetLedger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/market-ledger-service.proto",
}
